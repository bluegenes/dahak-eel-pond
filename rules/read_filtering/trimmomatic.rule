from os.path import join

trim_params = readfilt["trimmomatic"]

rule trimmomatic_pe:
    """
    Trim reads from the sequencer by trimming or dropping low-quality reads.
    """
    input:
        r1= lambda wildcards: units[units['read_type']=='pe'].loc[(wildcards.sample, wildcards.unit), ["fq1"]].dropna(),
        r2 =lambda wildcards: units[units['read_type']=='pe'].loc[(wildcards.sample, wildcards.unit), ["fq2"]].dropna()
    output:
        r1=join(TRIM_DIR, "{sample}_{unit}_1.trim.fq.gz"),
        r2=join(TRIM_DIR, "{sample}_{unit}_2.trim.fq.gz"),
        r1_unpaired=join(TRIM_DIR, "{sample}_{unit}_1.se.fq.gz"),
        r2_unpaired=join(TRIM_DIR, "{sample}_{unit}_2.se.fq.gz"),
    message:
        """--- Quality trimming PE read data with Trimmomatic."""
    params:
        trimmer = (trim_params['trim_cmd'].format(readfilt['adapter_file']['pe_name'])).split(' '),
        extra = '' 
    log:
        qual_log = join(LOGS_DIR, 'trimmomatic/{sample}_{unit}.log')
    
    wrapper:
        '0.23.1/bio/trimmomatic/pe'

rule trimmomatic_se:
    """
    Trim reads from the sequencer by trimming or dropping low-quality reads.
    """
    input:
        r1= lambda wildcards: units[units['read_type']=='se'].loc[(wildcards.sample, wildcards.unit), ["fq1"]].dropna(),
    output:
        r1=join(TRIM_DIR, "{sample}_{unit}_1.trim.fq.gz"),
    message:
        """--- Quality trimming SE read data with Trimmomatic."""
    params:
        trimmer = (trim_params['trim_cmd'].format(readfilt['adapter_file']['se_name'])).split(' '),
        extra = '' 
    log:
        qual_log = join(LOGS_DIR, 'trimmomatic/{sample}_{unit}.log')
    
    wrapper:
        '0.23.1/bio/trimmomatic/se'

